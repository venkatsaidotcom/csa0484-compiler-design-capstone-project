#include <stdio.h> 
#include <ctype.h> 
#include <string.h> 
#define MAX_KEYWORDS 7 
#define MAX_IDENTIFIER_LEN 100 
// List of keywords 
char *keywords[MAX_KEYWORDS] = { 
"int", "return", "if", "else", "while", "for", "do" 
}; 
int isKeyword(char *str) { 
for (int i = 0; i < MAX_KEYWORDS; i++) { 
if (strcmp(str, keywords[i]) == 0) 
return 1; 
} 
return 0; 
} 
int isOperator(char ch) { 
return ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '=' || ch == '<' || ch == '>'; 
} 
int isSeparator(char ch) { 
return ch == '(' || ch == ')' || ch == '{' || ch == '}' || ch == ';'; 
} 
void tokenize(char *sourceCode) { 
char currentToken[MAX_IDENTIFIER_LEN]; 
int i = 0, j = 0; 
while (sourceCode[i] != '\0') { 
if (isspace(sourceCode[i])) { 
i++; 
continue; 
} 
if (isalpha(sourceCode[i])) { 
j = 0; 
while (isalnum(sourceCode[i])) { 
currentToken[j++] = sourceCode[i++]; 
} 
currentToken[j] = '\0'; 
if (isKeyword(currentToken)) { 
printf("Keyword: %s\n", currentToken); 
} else { 
printf("Identifier: %s\n", currentToken); 
} 
} else if (isdigit(sourceCode[i])) { 
j = 0; 
while (isdigit(sourceCode[i])) { 
currentToken[j++] = sourceCode[i++]; 
} 
currentToken[j] = '\0'; 
printf("Constant: %s\n", currentToken); 
} else if (isOperator(sourceCode[i])) { 
printf("Operator: %c\n", sourceCode[i]); 
i++; 
} else if (isSeparator(sourceCode[i])) { 
printf("Separator: %c\n", sourceCode[i]); 
i++; 
} else { 
printf("Unknown character: %c\n", sourceCode[i]); 
i++; 
} 
} 
} 
int main() { 
char sourceCode[] = "int main() { int a = 10; if (a > 5) { a = a + 1; } return 0; 
}"; 
printf("Source Code:\n%s\n", sourceCode); 
printf("\nTokens:\n"); 
tokenize(sourceCode); 
return 0; 
}
